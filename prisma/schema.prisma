generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  directUrl         = env("DIRECT_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id             Int               @id @default(autoincrement())
  email          String            @unique
  passwordHash   String
  firstName      String?
  lastName       String?
  birthdate      DateTime?
  gender         String?
  country        String?
  role           String            @default("user")
  preferredColor String?           @db.Char(7)
  createdAt      DateTime          @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime          @default(now()) @updatedAt
  babies         Baby[]
  toolSettings   UserToolSettings?
  groceries      GroceryItem[]
  todoItems      TodoItem[]
  diaryEntries   WorkDiaryEntry[]
  labels         WorkDiaryLabel[]

  @@map("users")
}

model Suggestion {
  id          Int              @id @default(autoincrement())
  userId      Int?
  name        String?
  email       String?
  isAnonymous Boolean          @default(false)
  hidePublic  Boolean          @default(false)
  content     String
  status      SuggestionStatus @default(NEW)
  pinned      Boolean          @default(false)
  archived    Boolean          @default(false)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  @@index([status, archived])
}

model WorkDiaryEntry {
  id         Int         @id @default(autoincrement())
  userId     Int
  label      String?
  typeColor  String?     @db.Char(7)
  title      String?
  notes      String?
  location   String?
  startAt    DateTime    @db.Timestamptz(6)
  endAt      DateTime?   @db.Timestamptz(6)
  allDay     Boolean     @default(false)
  priority   Int?
  recurrence String?
  reminders  Json        @default("[]")
  createdAt  DateTime    @default(now()) @db.Timestamptz(6)
  updatedAt  DateTime    @default(now()) @updatedAt
  type       DiaryType
  status     DiaryStatus @default(planned)
  user       User        @relation(fields: [userId], references: [id])

  @@index([userId, startAt], map: "idx_diary_user_start")
  @@index([userId, status], map: "idx_diary_user_status")
  @@index([userId, allDay], map: "idx_diary_user_allday")
  @@map("work_diary_entries")
}

model WorkDiaryLabel {
  id        Int      @id @default(autoincrement())
  userId    Int
  name      String
  colorHex  String   @db.Char(7)
  archived  Boolean  @default(false)
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, name], name: "uniq_diarylabel_user_name")
  @@map("work_diary_labels")
}

model GroceryItem {
  id        Int             @id @default(autoincrement())
  userId    Int
  text      String
  completed Boolean         @default(false)
  createdAt DateTime        @default(now()) @db.Timestamptz(6)
  updatedAt DateTime        @updatedAt @db.Timestamptz(6)
  list      GroceryListKind @default(daily)
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, list, completed, createdAt])
  @@index([userId, completed])
  @@map("grocery_items")
}

model TodoItem {
  id        Int          @id @default(autoincrement())
  userId    Int
  title     String
  note      String?
  done      Boolean      @default(false)
  priority  TodoPriority @default(med)
  due       DateTime?
  createdAt DateTime     @default(now()) @db.Timestamptz(6)
  updatedAt DateTime     @updatedAt @db.Timestamptz(6)
  user      User         @relation(fields: [userId], references: [id])

  @@index([userId, done, priority])
  @@map("todo_items")
}

model DayLog {
  id        Int      @id @default(autoincrement())
  date      DateTime @db.Date
  dayColor  String?  @db.VarChar(7)
  userId    Int?
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)

  @@unique([userId, date], name: "daylog_user_date_unique")
}

model RecurringEvent {
  id         Int        @id @default(autoincrement())
  userId     Int?
  title      String
  baseDate   DateTime   @db.Date
  recurrence Recurrence
  notes      String?
  skips      DateTime[] @db.Date
  overrides  Json?
  createdAt  DateTime   @default(now()) @db.Timestamptz(6)
  updatedAt  DateTime   @updatedAt @db.Timestamptz(6)
}

model Baby {
  id        String    @id @default(cuid())
  name      String
  birth     DateTime?
  userId    Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  logs      BabyLog[]

  @@index([userId])
}

model BabyLog {
  id         String   @id @default(cuid())
  userId     String
  babyId     String?
  occurredAt DateTime
  foodType   String
  amount     Int
  unit       String
  weightKg   Float?
  notes      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  baby       Baby?    @relation(fields: [babyId], references: [id])

  @@index([userId])
  @@index([babyId])
}

model UserToolSettings {
  id        Int       @id @default(autoincrement())
  userId    Int       @unique
  calendar  Boolean   @default(true)
  diary     Boolean   @default(true)
  tasks     Boolean   @default(true)
  workouts  Boolean   @default(true)
  shopping  Boolean   @default(true)
  weather   Boolean   @default(true)
  baby      Boolean   @default(true)
  stats     Boolean   @default(false)
  projects  Boolean   @default(false)
  createdAt DateTime? @default(now()) @db.Timestamptz(6) @map("createdat")
  updatedAt DateTime? @default(now()) @db.Timestamptz(6) @map("updatedat")
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([userId])
}

enum Recurrence {
  MONTHLY
  YEARLY
}

enum DiaryType {
  task
  job
  meeting
  other
}

enum DiaryStatus {
  planned
  in_progress
  done
  cancelled
}

enum TodoPriority {
  low
  med
  high
}

enum GroceryListKind {
  daily
  longterm
}

enum SuggestionStatus {
  NEW
  PLANNED
  IN_PROGRESS
  DONE
  REJECTED
}
